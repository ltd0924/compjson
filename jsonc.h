#pragma once

#include <cstddef>
#include <cassert>
#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <sstream>
#include "Value.h"
#include "Array.h"
#include "Object.h"
#define JSONXX_MAJOR    "0"
#define JSONXX_MINOR    "22"
#define JSONXX_EXTRA    "a"
#define JSONXX_VERSION  JSONXX_MAJOR "." JSONXX_MINOR "-" JSONXX_EXTRA
#define JSONXX_XML_TAG  "<!-- generated by jsonxx " JSONXX_VERSION " -->"

#if __cplusplus > 199711L
#define JSONXX_COMPILER_HAS_CXX11 1
#elif defined(_MSC_VER) && _MSC_VER > 1700
#define JSONXX_COMPILER_HAS_CXX11 1
#else
#define JSONXX_COMPILER_HAS_CXX11 0
#endif

#ifdef _MSC_VER
// disable the C4127 warning if using VC, see http://stackoverflow.com/a/12042515
#define JSONXX_ASSERT(...) \
  do { \
    __pragma(warning(push)) __pragma(warning(disable:4127)) \
    if( jsonxx::Assertions ) \
    __pragma(warning(pop)) \
      jsonxx::assertion(__FILE__,__LINE__,#__VA_ARGS__,bool(__VA_ARGS__)); \
  __pragma(warning(push)) __pragma(warning(disable:4127)) \
  } while(0) \
  __pragma(warning(pop))
#else
#define JSONXX_ASSERT(...) do { if( jsonxx::Assertions ) \
  jsonxx::assertion(__FILE__,__LINE__,#__VA_ARGS__,bool(__VA_ARGS__)); } while(0)
#endif


enum Settings {
	// constants
	Enabled = true,
	Disabled = false,
	Permissive = true,
	Strict = false,
	// values
	Parser = Permissive,  // permissive or strict parsing
	UnquotedKeys = Disabled, // support of unquoted keys
	Assertions = Enabled  // enabled or disabled assertions (these asserts work both in DEBUG and RELEASE builds)
};
inline bool parser_is_strict() { return Parser == Strict; }
inline bool parser_is_permissive() { return Parser == Permissive; }
inline bool unquoted_keys_are_enabled() { return UnquotedKeys == Enabled; }
typedef long double Number;
typedef bool Boolean;
typedef std::string String;
struct Null {};
template <typename T>
struct identity {
	typedef T type;
};

class IOStateMasker {
public:
	explicit IOStateMasker(std::istream& input) : stream(input) {
		mask = input.exceptions();
		input.exceptions(std::istream::goodbit);
	}

	~IOStateMasker() {
		stream.exceptions(mask);
	}

private:
	std::istream& stream;
	std::istream::iostate mask;
};

bool match(const char* pattern, std::istream& input);
bool parse_comment(std::istream& input);
bool parse_identifier(std::istream& input, std::string& value);

std::ostream& operator<<(std::ostream& stream, const Value& v);
std::ostream& operator<<(std::ostream& stream, const Object& v);
std::ostream& operator<<(std::ostream& stream, const Array& v);